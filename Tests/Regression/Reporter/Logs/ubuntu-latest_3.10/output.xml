<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 6.0.2 (Python 3.10.11 on linux)" generated="20230512 15:44:23.517" rpa="false" schemaversion="3">
<suite id="s1" name="Reporter" source="/home/runner/work/rfswarm/rfswarm/Tests/Regression/Reporter">
<suite id="s1-s1" name="CommandLine" source="/home/runner/work/rfswarm/rfswarm/Tests/Regression/Reporter/CommandLine.robot">
<kw name="Clean Up Old Files" type="SETUP">
<tag>macos-latest</tag>
<tag>ubuntu-latest</tag>
<tag>windows-latest</tag>
<kw name="Log To Console" library="BuiltIn">
<arg>${OUTPUT DIR}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20230512 15:44:23.567" endtime="20230512 15:44:23.567"/>
</kw>
<kw name="Remove File" library="OperatingSystem">
<arg>${OUTPUT DIR}${/}*.txt</arg>
<doc>Removes a file with the given path.</doc>
<msg timestamp="20230512 15:44:23.568" level="INFO" html="true">Removed file '&lt;a href="file:///home/runner/work/rfswarm/rfswarm/Tests/Regression/Reporter/Logs/ubuntu-latest_3.10/stderr.txt"&gt;/home/runner/work/rfswarm/rfswarm/Tests/Regression/Reporter/Logs/ubuntu-latest_3.10/stderr.txt&lt;/a&gt;'.</msg>
<msg timestamp="20230512 15:44:23.568" level="INFO" html="true">Removed file '&lt;a href="file:///home/runner/work/rfswarm/rfswarm/Tests/Regression/Reporter/Logs/ubuntu-latest_3.10/stdout.txt"&gt;/home/runner/work/rfswarm/rfswarm/Tests/Regression/Reporter/Logs/ubuntu-latest_3.10/stdout.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20230512 15:44:23.567" endtime="20230512 15:44:23.568"/>
</kw>
<kw name="Remove File" library="OperatingSystem">
<arg>${OUTPUT DIR}${/}*.png</arg>
<doc>Removes a file with the given path.</doc>
<msg timestamp="20230512 15:44:23.569" level="INFO" html="true">Removed file '&lt;a href="file:///home/runner/work/rfswarm/rfswarm/Tests/Regression/Reporter/Logs/ubuntu-latest_3.10/Reporter.GUIBasic-screenshot-1.png"&gt;/home/runner/work/rfswarm/rfswarm/Tests/Regression/Reporter/Logs/ubuntu-latest_3.10/Reporter.GUIBasic-screenshot-1.png&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20230512 15:44:23.568" endtime="20230512 15:44:23.569"/>
</kw>
<status status="PASS" starttime="20230512 15:44:23.567" endtime="20230512 15:44:23.569"/>
</kw>
<test id="s1-s1-t1" name="Reporter Version" line="16">
<kw name="Run" library="OperatingSystem">
<var>${result}</var>
<arg>python3 ${EXECDIR}${/}rfswarm_reporter${/}rfswarm_reporter.py -v</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20230512 15:44:23.571" level="INFO">Running command 'python3 /home/runner/work/rfswarm/rfswarm/rfswarm_reporter/rfswarm_reporter.py -v 2&gt;&amp;1'.</msg>
<msg timestamp="20230512 15:44:26.781" level="INFO">${result} = Robot Framework Swarm: Reporter 
	Version 1.1.2 </msg>
<status status="PASS" starttime="20230512 15:44:23.570" endtime="20230512 15:44:26.781"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>${\n}${result}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20230512 15:44:26.781" endtime="20230512 15:44:26.782"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>Version</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20230512 15:44:26.782" endtime="20230512 15:44:26.782"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>Reporter</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20230512 15:44:26.782" endtime="20230512 15:44:26.783"/>
</kw>
<tag>macos-latest</tag>
<tag>ubuntu-latest</tag>
<tag>windows-latest</tag>
<status status="PASS" starttime="20230512 15:44:23.569" endtime="20230512 15:44:26.783"/>
</test>
<test id="s1-s1-t2" name="Reporter Help" line="23">
<kw name="Run" library="OperatingSystem">
<var>${result}</var>
<arg>python3 ${EXECDIR}${/}rfswarm_reporter${/}rfswarm_reporter.py -h</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20230512 15:44:26.785" level="INFO">Running command 'python3 /home/runner/work/rfswarm/rfswarm/rfswarm_reporter/rfswarm_reporter.py -h 2&gt;&amp;1'.</msg>
<msg timestamp="20230512 15:44:27.859" level="INFO">${result} = Robot Framework Swarm: Reporter 
	Version 1.1.2 
usage: rfswarm_reporter.py [-h] [-g DEBUG] [-v] [-i INI] [-n] [-d DIR]
                           [-t TEMPLATE] [--html] [--docx] [--xlsx]

options:
  ...</msg>
<status status="PASS" starttime="20230512 15:44:26.784" endtime="20230512 15:44:27.859"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>${\n}${result}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20230512 15:44:27.859" endtime="20230512 15:44:27.859"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>Excel</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20230512 15:44:27.859" endtime="20230512 15:44:27.860"/>
</kw>
<tag>macos-latest</tag>
<tag>ubuntu-latest</tag>
<tag>windows-latest</tag>
<status status="PASS" starttime="20230512 15:44:26.784" endtime="20230512 15:44:27.860"/>
</test>
<test id="s1-s1-t3" name="Command Line Generate HTML" line="29">
<kw name="Set Variable" library="BuiltIn">
<var>${testdata}</var>
<arg>Issue-#144</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20230512 15:44:27.861" level="INFO">${testdata} = Issue-#144</msg>
<status status="PASS" starttime="20230512 15:44:27.860" endtime="20230512 15:44:27.861"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${resultdata}</var>
<arg>20230320_185055_demo</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20230512 15:44:27.861" level="INFO">${resultdata} = 20230320_185055_demo</msg>
<status status="PASS" starttime="20230512 15:44:27.861" endtime="20230512 15:44:27.861"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${basefolder}</var>
<arg>/home/runner/work/rfswarm/rfswarm/Tests/Regression/Reporter${/}testdata${/}${testdata}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20230512 15:44:27.862" level="INFO">${basefolder} = /home/runner/work/rfswarm/rfswarm/Tests/Regression/Reporter/testdata/Issue-#144</msg>
<status status="PASS" starttime="20230512 15:44:27.861" endtime="20230512 15:44:27.862"/>
</kw>
<kw name="Should Exist" library="OperatingSystem">
<arg>${basefolder}</arg>
<doc>Fails unless the given path (file or directory) exists.</doc>
<msg timestamp="20230512 15:44:27.862" level="INFO" html="true">Path '&lt;a href="file:///home/runner/work/rfswarm/rfswarm/Tests/Regression/Reporter/testdata/Issue-#144"&gt;/home/runner/work/rfswarm/rfswarm/Tests/Regression/Reporter/testdata/Issue-#144&lt;/a&gt;' exists.</msg>
<status status="PASS" starttime="20230512 15:44:27.862" endtime="20230512 15:44:27.863"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>basefolder: ${basefolder}</arg>
<arg>console=True</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230512 15:44:27.863" level="INFO">basefolder: /home/runner/work/rfswarm/rfswarm/Tests/Regression/Reporter/testdata/Issue-#144</msg>
<status status="PASS" starttime="20230512 15:44:27.863" endtime="20230512 15:44:27.863"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${resultfolder}</var>
<arg>${basefolder}${/}${resultdata}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20230512 15:44:27.864" level="INFO">${resultfolder} = /home/runner/work/rfswarm/rfswarm/Tests/Regression/Reporter/testdata/Issue-#144/20230320_185055_demo</msg>
<status status="PASS" starttime="20230512 15:44:27.863" endtime="20230512 15:44:27.864"/>
</kw>
<kw name="Should Exist" library="OperatingSystem">
<arg>${resultfolder}</arg>
<doc>Fails unless the given path (file or directory) exists.</doc>
<msg timestamp="20230512 15:44:27.864" level="INFO" html="true">Path '&lt;a href="file:///home/runner/work/rfswarm/rfswarm/Tests/Regression/Reporter/testdata/Issue-#144/20230320_185055_demo"&gt;/home/runner/work/rfswarm/rfswarm/Tests/Regression/Reporter/testdata/Issue-#144/20230320_185055_demo&lt;/a&gt;' exists.</msg>
<status status="PASS" starttime="20230512 15:44:27.864" endtime="20230512 15:44:27.864"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>resultfolder: ${resultfolder}</arg>
<arg>console=True</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230512 15:44:27.865" level="INFO">resultfolder: /home/runner/work/rfswarm/rfswarm/Tests/Regression/Reporter/testdata/Issue-#144/20230320_185055_demo</msg>
<status status="PASS" starttime="20230512 15:44:27.864" endtime="20230512 15:44:27.865"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${template}</var>
<arg>${basefolder}${/}90%ileTemplate.template</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20230512 15:44:27.865" level="INFO">${template} = /home/runner/work/rfswarm/rfswarm/Tests/Regression/Reporter/testdata/Issue-#144/90%ileTemplate.template</msg>
<status status="PASS" starttime="20230512 15:44:27.865" endtime="20230512 15:44:27.865"/>
</kw>
<kw name="Should Exist" library="OperatingSystem">
<arg>${template}</arg>
<doc>Fails unless the given path (file or directory) exists.</doc>
<msg timestamp="20230512 15:44:27.866" level="INFO" html="true">Path '&lt;a href="file:///home/runner/work/rfswarm/rfswarm/Tests/Regression/Reporter/testdata/Issue-#144/90%ileTemplate.template"&gt;/home/runner/work/rfswarm/rfswarm/Tests/Regression/Reporter/testdata/Issue-#144/90%ileTemplate.template&lt;/a&gt;' exists.</msg>
<status status="PASS" starttime="20230512 15:44:27.865" endtime="20230512 15:44:27.866"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>template: ${template}</arg>
<arg>console=True</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230512 15:44:27.866" level="INFO">template: /home/runner/work/rfswarm/rfswarm/Tests/Regression/Reporter/testdata/Issue-#144/90%ileTemplate.template</msg>
<status status="PASS" starttime="20230512 15:44:27.866" endtime="20230512 15:44:27.866"/>
</kw>
<kw name="Run" library="OperatingSystem">
<var>${result}</var>
<arg>python3 ${pyfile} -n -g 1 -d ${resultfolder} -t ${template} --html</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20230512 15:44:27.867" level="INFO">Running command 'python3 /home/runner/work/rfswarm/rfswarm/rfswarm_reporter/rfswarm_reporter.py -n -g 1 -d /home/runner/work/rfswarm/rfswarm/Tests/Regression/Reporter/testdata/Issue-#144/20230320_185055_demo -t /home/runner/work/rfswarm/rfswarm/Tests/Regression/Reporter/testdata/Issue-#144/90%ileTemplate.template --html 2&gt;&amp;1'.</msg>
<msg timestamp="20230512 15:44:32.101" level="INFO">${result} = </msg>
<status status="PASS" starttime="20230512 15:44:27.867" endtime="20230512 15:44:32.101"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>result: ${\n}${result}</arg>
<arg>console=True</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230512 15:44:32.102" level="INFO">result: 
</msg>
<status status="PASS" starttime="20230512 15:44:32.101" endtime="20230512 15:44:32.102"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>Traceback</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20230512 15:44:32.102" endtime="20230512 15:44:32.102"/>
</kw>
<kw name="Should Exist" library="OperatingSystem">
<arg>${resultfolder}${/}${resultdata}.html</arg>
<doc>Fails unless the given path (file or directory) exists.</doc>
<msg timestamp="20230512 15:44:32.103" level="INFO" html="true">Path '&lt;a href="file:///home/runner/work/rfswarm/rfswarm/Tests/Regression/Reporter/testdata/Issue-#144/20230320_185055_demo/20230320_185055_demo.html"&gt;/home/runner/work/rfswarm/rfswarm/Tests/Regression/Reporter/testdata/Issue-#144/20230320_185055_demo/20230320_185055_demo.html&lt;/a&gt;' exists.</msg>
<status status="PASS" starttime="20230512 15:44:32.102" endtime="20230512 15:44:32.103"/>
</kw>
<tag>HTML</tag>
<tag>Issue #144</tag>
<tag>macos-latest</tag>
<tag>ubuntu-latest</tag>
<tag>windows-latest</tag>
<status status="PASS" starttime="20230512 15:44:27.860" endtime="20230512 15:44:32.103"/>
</test>
<test id="s1-s1-t4" name="Command Line Generate Docx" line="47">
<kw name="Set Variable" library="BuiltIn">
<var>${testdata}</var>
<arg>Issue-#144</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20230512 15:44:32.104" level="INFO">${testdata} = Issue-#144</msg>
<status status="PASS" starttime="20230512 15:44:32.104" endtime="20230512 15:44:32.104"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${resultdata}</var>
<arg>20230320_185055_demo</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20230512 15:44:32.104" level="INFO">${resultdata} = 20230320_185055_demo</msg>
<status status="PASS" starttime="20230512 15:44:32.104" endtime="20230512 15:44:32.104"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${basefolder}</var>
<arg>/home/runner/work/rfswarm/rfswarm/Tests/Regression/Reporter${/}testdata${/}${testdata}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20230512 15:44:32.105" level="INFO">${basefolder} = /home/runner/work/rfswarm/rfswarm/Tests/Regression/Reporter/testdata/Issue-#144</msg>
<status status="PASS" starttime="20230512 15:44:32.105" endtime="20230512 15:44:32.105"/>
</kw>
<kw name="Should Exist" library="OperatingSystem">
<arg>${basefolder}</arg>
<doc>Fails unless the given path (file or directory) exists.</doc>
<msg timestamp="20230512 15:44:32.105" level="INFO" html="true">Path '&lt;a href="file:///home/runner/work/rfswarm/rfswarm/Tests/Regression/Reporter/testdata/Issue-#144"&gt;/home/runner/work/rfswarm/rfswarm/Tests/Regression/Reporter/testdata/Issue-#144&lt;/a&gt;' exists.</msg>
<status status="PASS" starttime="20230512 15:44:32.105" endtime="20230512 15:44:32.106"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>basefolder: ${basefolder}</arg>
<arg>console=True</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20230512 15:44:32.106" endtime="20230512 15:44:32.106"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${resultfolder}</var>
<arg>${basefolder}${/}${resultdata}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20230512 15:44:32.107" level="INFO">${resultfolder} = /home/runner/work/rfswarm/rfswarm/Tests/Regression/Reporter/testdata/Issue-#144/20230320_185055_demo</msg>
<status status="PASS" starttime="20230512 15:44:32.106" endtime="20230512 15:44:32.107"/>
</kw>
<kw name="Should Exist" library="OperatingSystem">
<arg>${resultfolder}</arg>
<doc>Fails unless the given path (file or directory) exists.</doc>
<msg timestamp="20230512 15:44:32.107" level="INFO" html="true">Path '&lt;a href="file:///home/runner/work/rfswarm/rfswarm/Tests/Regression/Reporter/testdata/Issue-#144/20230320_185055_demo"&gt;/home/runner/work/rfswarm/rfswarm/Tests/Regression/Reporter/testdata/Issue-#144/20230320_185055_demo&lt;/a&gt;' exists.</msg>
<status status="PASS" starttime="20230512 15:44:32.107" endtime="20230512 15:44:32.107"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>resultfolder: ${resultfolder}</arg>
<arg>console=True</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230512 15:44:32.108" level="INFO">resultfolder: /home/runner/work/rfswarm/rfswarm/Tests/Regression/Reporter/testdata/Issue-#144/20230320_185055_demo</msg>
<status status="PASS" starttime="20230512 15:44:32.107" endtime="20230512 15:44:32.108"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${template}</var>
<arg>${basefolder}${/}90%ileTemplate.template</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20230512 15:44:32.108" level="INFO">${template} = /home/runner/work/rfswarm/rfswarm/Tests/Regression/Reporter/testdata/Issue-#144/90%ileTemplate.template</msg>
<status status="PASS" starttime="20230512 15:44:32.108" endtime="20230512 15:44:32.108"/>
</kw>
<kw name="Should Exist" library="OperatingSystem">
<arg>${template}</arg>
<doc>Fails unless the given path (file or directory) exists.</doc>
<msg timestamp="20230512 15:44:32.109" level="INFO" html="true">Path '&lt;a href="file:///home/runner/work/rfswarm/rfswarm/Tests/Regression/Reporter/testdata/Issue-#144/90%ileTemplate.template"&gt;/home/runner/work/rfswarm/rfswarm/Tests/Regression/Reporter/testdata/Issue-#144/90%ileTemplate.template&lt;/a&gt;' exists.</msg>
<status status="PASS" starttime="20230512 15:44:32.108" endtime="20230512 15:44:32.109"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>template: ${template}</arg>
<arg>console=True</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230512 15:44:32.109" level="INFO">template: /home/runner/work/rfswarm/rfswarm/Tests/Regression/Reporter/testdata/Issue-#144/90%ileTemplate.template</msg>
<status status="PASS" starttime="20230512 15:44:32.109" endtime="20230512 15:44:32.109"/>
</kw>
<kw name="Run" library="OperatingSystem">
<var>${result}</var>
<arg>python3 ${pyfile} -n -g 1 -d ${resultfolder} -t ${template} --docx</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20230512 15:44:32.110" level="INFO">Running command 'python3 /home/runner/work/rfswarm/rfswarm/rfswarm_reporter/rfswarm_reporter.py -n -g 1 -d /home/runner/work/rfswarm/rfswarm/Tests/Regression/Reporter/testdata/Issue-#144/20230320_185055_demo -t /home/runner/work/rfswarm/rfswarm/Tests/Regression/Reporter/testdata/Issue-#144/90%ileTemplate.template --docx 2&gt;&amp;1'.</msg>
<msg timestamp="20230512 15:44:37.410" level="INFO">${result} = </msg>
<status status="PASS" starttime="20230512 15:44:32.110" endtime="20230512 15:44:37.410"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${\n}${result}</arg>
<arg>console=True</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230512 15:44:37.411" level="INFO">
</msg>
<status status="PASS" starttime="20230512 15:44:37.410" endtime="20230512 15:44:37.411"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>Traceback</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20230512 15:44:37.411" endtime="20230512 15:44:37.411"/>
</kw>
<kw name="Should Exist" library="OperatingSystem">
<arg>${resultfolder}${/}${resultdata}.docx</arg>
<doc>Fails unless the given path (file or directory) exists.</doc>
<msg timestamp="20230512 15:44:37.412" level="INFO" html="true">Path '&lt;a href="file:///home/runner/work/rfswarm/rfswarm/Tests/Regression/Reporter/testdata/Issue-#144/20230320_185055_demo/20230320_185055_demo.docx"&gt;/home/runner/work/rfswarm/rfswarm/Tests/Regression/Reporter/testdata/Issue-#144/20230320_185055_demo/20230320_185055_demo.docx&lt;/a&gt;' exists.</msg>
<status status="PASS" starttime="20230512 15:44:37.411" endtime="20230512 15:44:37.412"/>
</kw>
<tag>DOCX</tag>
<tag>Issue #144</tag>
<tag>macos-latest</tag>
<tag>ubuntu-latest</tag>
<tag>windows-latest</tag>
<status status="PASS" starttime="20230512 15:44:32.103" endtime="20230512 15:44:37.412"/>
</test>
<test id="s1-s1-t5" name="Command Line Generate Xlsx" line="65">
<kw name="Set Variable" library="BuiltIn">
<var>${testdata}</var>
<arg>Issue-#144</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20230512 15:44:37.413" level="INFO">${testdata} = Issue-#144</msg>
<status status="PASS" starttime="20230512 15:44:37.413" endtime="20230512 15:44:37.413"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${resultdata}</var>
<arg>20230320_185055_demo</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20230512 15:44:37.413" level="INFO">${resultdata} = 20230320_185055_demo</msg>
<status status="PASS" starttime="20230512 15:44:37.413" endtime="20230512 15:44:37.413"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${basefolder}</var>
<arg>/home/runner/work/rfswarm/rfswarm/Tests/Regression/Reporter${/}testdata${/}${testdata}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20230512 15:44:37.414" level="INFO">${basefolder} = /home/runner/work/rfswarm/rfswarm/Tests/Regression/Reporter/testdata/Issue-#144</msg>
<status status="PASS" starttime="20230512 15:44:37.414" endtime="20230512 15:44:37.414"/>
</kw>
<kw name="Should Exist" library="OperatingSystem">
<arg>${basefolder}</arg>
<doc>Fails unless the given path (file or directory) exists.</doc>
<msg timestamp="20230512 15:44:37.414" level="INFO" html="true">Path '&lt;a href="file:///home/runner/work/rfswarm/rfswarm/Tests/Regression/Reporter/testdata/Issue-#144"&gt;/home/runner/work/rfswarm/rfswarm/Tests/Regression/Reporter/testdata/Issue-#144&lt;/a&gt;' exists.</msg>
<status status="PASS" starttime="20230512 15:44:37.414" endtime="20230512 15:44:37.414"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>basefolder: ${basefolder}</arg>
<arg>console=True</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230512 15:44:37.415" level="INFO">basefolder: /home/runner/work/rfswarm/rfswarm/Tests/Regression/Reporter/testdata/Issue-#144</msg>
<status status="PASS" starttime="20230512 15:44:37.415" endtime="20230512 15:44:37.415"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${resultfolder}</var>
<arg>${basefolder}${/}${resultdata}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20230512 15:44:37.416" level="INFO">${resultfolder} = /home/runner/work/rfswarm/rfswarm/Tests/Regression/Reporter/testdata/Issue-#144/20230320_185055_demo</msg>
<status status="PASS" starttime="20230512 15:44:37.415" endtime="20230512 15:44:37.416"/>
</kw>
<kw name="Should Exist" library="OperatingSystem">
<arg>${resultfolder}</arg>
<doc>Fails unless the given path (file or directory) exists.</doc>
<msg timestamp="20230512 15:44:37.416" level="INFO" html="true">Path '&lt;a href="file:///home/runner/work/rfswarm/rfswarm/Tests/Regression/Reporter/testdata/Issue-#144/20230320_185055_demo"&gt;/home/runner/work/rfswarm/rfswarm/Tests/Regression/Reporter/testdata/Issue-#144/20230320_185055_demo&lt;/a&gt;' exists.</msg>
<status status="PASS" starttime="20230512 15:44:37.416" endtime="20230512 15:44:37.416"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>resultfolder: ${resultfolder}</arg>
<arg>console=True</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230512 15:44:37.416" level="INFO">resultfolder: /home/runner/work/rfswarm/rfswarm/Tests/Regression/Reporter/testdata/Issue-#144/20230320_185055_demo</msg>
<status status="PASS" starttime="20230512 15:44:37.416" endtime="20230512 15:44:37.416"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${template}</var>
<arg>${basefolder}${/}90%ileTemplate.template</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20230512 15:44:37.417" level="INFO">${template} = /home/runner/work/rfswarm/rfswarm/Tests/Regression/Reporter/testdata/Issue-#144/90%ileTemplate.template</msg>
<status status="PASS" starttime="20230512 15:44:37.417" endtime="20230512 15:44:37.417"/>
</kw>
<kw name="Should Exist" library="OperatingSystem">
<arg>${template}</arg>
<doc>Fails unless the given path (file or directory) exists.</doc>
<msg timestamp="20230512 15:44:37.417" level="INFO" html="true">Path '&lt;a href="file:///home/runner/work/rfswarm/rfswarm/Tests/Regression/Reporter/testdata/Issue-#144/90%ileTemplate.template"&gt;/home/runner/work/rfswarm/rfswarm/Tests/Regression/Reporter/testdata/Issue-#144/90%ileTemplate.template&lt;/a&gt;' exists.</msg>
<status status="PASS" starttime="20230512 15:44:37.417" endtime="20230512 15:44:37.417"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>template: ${template}</arg>
<arg>console=True</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230512 15:44:37.418" level="INFO">template: /home/runner/work/rfswarm/rfswarm/Tests/Regression/Reporter/testdata/Issue-#144/90%ileTemplate.template</msg>
<status status="PASS" starttime="20230512 15:44:37.418" endtime="20230512 15:44:37.418"/>
</kw>
<kw name="Run" library="OperatingSystem">
<var>${result}</var>
<arg>python3 ${pyfile} -n -g 1 -d ${resultfolder} -t ${template} --xlsx</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20230512 15:44:37.419" level="INFO">Running command 'python3 /home/runner/work/rfswarm/rfswarm/rfswarm_reporter/rfswarm_reporter.py -n -g 1 -d /home/runner/work/rfswarm/rfswarm/Tests/Regression/Reporter/testdata/Issue-#144/20230320_185055_demo -t /home/runner/work/rfswarm/rfswarm/Tests/Regression/Reporter/testdata/Issue-#144/90%ileTemplate.template --xlsx 2&gt;&amp;1'.</msg>
<msg timestamp="20230512 15:44:41.625" level="INFO">${result} = </msg>
<status status="PASS" starttime="20230512 15:44:37.418" endtime="20230512 15:44:41.625"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${\n}${result}</arg>
<arg>console=True</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230512 15:44:41.626" level="INFO">
</msg>
<status status="PASS" starttime="20230512 15:44:41.625" endtime="20230512 15:44:41.626"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>Traceback</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20230512 15:44:41.626" endtime="20230512 15:44:41.626"/>
</kw>
<kw name="Should Exist" library="OperatingSystem">
<arg>${resultfolder}${/}${resultdata}.xlsx</arg>
<doc>Fails unless the given path (file or directory) exists.</doc>
<msg timestamp="20230512 15:44:41.627" level="INFO" html="true">Path '&lt;a href="file:///home/runner/work/rfswarm/rfswarm/Tests/Regression/Reporter/testdata/Issue-#144/20230320_185055_demo/20230320_185055_demo.xlsx"&gt;/home/runner/work/rfswarm/rfswarm/Tests/Regression/Reporter/testdata/Issue-#144/20230320_185055_demo/20230320_185055_demo.xlsx&lt;/a&gt;' exists.</msg>
<status status="PASS" starttime="20230512 15:44:41.626" endtime="20230512 15:44:41.627"/>
</kw>
<tag>Issue #144</tag>
<tag>macos-latest</tag>
<tag>ubuntu-latest</tag>
<tag>windows-latest</tag>
<tag>XLSX</tag>
<status status="PASS" starttime="20230512 15:44:37.412" endtime="20230512 15:44:41.627"/>
</test>
<status status="PASS" starttime="20230512 15:44:23.548" endtime="20230512 15:44:41.628"/>
</suite>
<suite id="s1-s2" name="GUI Basic" source="/home/runner/work/rfswarm/rfswarm/Tests/Regression/Reporter/GUI_Basic.robot">
<test id="s1-s2-t1" name="GUI Runs and Closes" line="14">
<kw name="Open GUI">
<kw name="Get Variables" library="BuiltIn">
<var>${var}</var>
<doc>Returns a dictionary containing all variables in the current scope.</doc>
<msg timestamp="20230512 15:44:41.981" level="INFO">${var} = {'${/}': '/', '${:}': ':', '${\\n}': '\n', '${DEBUG_FILE}': 'NONE', '${EXECDIR}': '/home/runner/work/rfswarm/rfswarm', '${False}': False, '${IMAGE_DIR}': '/home/runner/work/rfswarm/rfswarm/Tests/Regre...</msg>
<status status="PASS" starttime="20230512 15:44:41.980" endtime="20230512 15:44:41.981"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${var}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230512 15:44:41.981" level="INFO">{'${/}': '/', '${:}': ':', '${\\n}': '\n', '${DEBUG_FILE}': 'NONE', '${EXECDIR}': '/home/runner/work/rfswarm/rfswarm', '${False}': False, '${IMAGE_DIR}': '/home/runner/work/rfswarm/rfswarm/Tests/Regression/Reporter/Images/file_method', '${LOG_FILE}': '/home/runner/work/rfswarm/rfswarm/Tests/Regression/Reporter/Logs/ubuntu-latest_3.10/log.html', '${LOG_LEVEL}': 'INFO', '${None}': None, '${null}': None, '${OUTPUT_DIR}': '/home/runner/work/rfswarm/rfswarm/Tests/Regression/Reporter/Logs/ubuntu-latest_3.10', '${OUTPUT_FILE}': '/home/runner/work/rfswarm/rfswarm/Tests/Regression/Reporter/Logs/ubuntu-latest_3.10/output.xml', '${PREV_TEST_MESSAGE}': '', '${PREV_TEST_NAME}': 'Command Line Generate Xlsx', '${PREV_TEST_STATUS}': 'PASS', '${process}': 'None', '${pyfile}': '/home/runner/work/rfswarm/rfswarm/rfswarm_reporter/rfswarm_reporter.py', '${REPORT_FILE}': '/home/runner/work/rfswarm/rfswarm/Tests/Regression/Reporter/Logs/ubuntu-latest_3.10/report.html', '${SPACE}': ' ', '${SUITE_DOCUMENTATION}': '', '${SUITE_NAME}': 'Reporter.GUI Basic', '${SUITE_SOURCE}': '/home/runner/work/rfswarm/rfswarm/Tests/Regression/Reporter/GUI_Basic.robot', '${TEMPDIR}': '/tmp', '${TEST_DOCUMENTATION}': '', '${TEST_NAME}': 'GUI Runs and Closes', '${True}': True, '&amp;{OPTIONS}': {'include': ['ubuntu-latest'], 'exclude': [], 'skip': [], 'skip_on_failure': []}, '&amp;{SUITE_METADATA}': &lt;robot.utils.normalizing.NormalizedDict object at 0x7f9b0a7a2770&gt;, '@{appargs}': [], '@{TEST_TAGS}': ['macos-latest', 'ubuntu-latest', 'windows-latest']}</msg>
<status status="PASS" starttime="20230512 15:44:41.981" endtime="20230512 15:44:41.982"/>
</kw>
<kw name="Get Platform">
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{platforms}</var>
<arg>Linux=ubuntu</arg>
<arg>Darwin=macos</arg>
<arg>Java=notsupported</arg>
<arg>Windows=windows</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20230512 15:44:41.982" level="INFO">&amp;{platforms} = { Linux=ubuntu | Darwin=macos | Java=notsupported | Windows=windows }</msg>
<status status="PASS" starttime="20230512 15:44:41.982" endtime="20230512 15:44:41.982"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${os}</var>
<arg>platform.system()</arg>
<arg>platform</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20230512 15:44:41.983" level="INFO">${os} = Linux</msg>
<status status="PASS" starttime="20230512 15:44:41.983" endtime="20230512 15:44:41.983"/>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>${platform}</arg>
<arg>${platforms}[${os}]</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20230512 15:44:41.984" level="INFO">${platform} = ubuntu</msg>
<status status="PASS" starttime="20230512 15:44:41.983" endtime="20230512 15:44:41.984"/>
</kw>
<status status="PASS" starttime="20230512 15:44:41.982" endtime="20230512 15:44:41.984"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${keyword}</var>
<arg>Open GUI ${platform}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20230512 15:44:41.985" level="INFO">${keyword} = Open GUI ubuntu</msg>
<status status="PASS" starttime="20230512 15:44:41.984" endtime="20230512 15:44:41.985"/>
</kw>
<kw name="Run Keyword" library="BuiltIn">
<arg>${keyword}</arg>
<arg>@{appargs}</arg>
<doc>Executes the given keyword with the given arguments.</doc>
<kw name="Open GUI ubuntu">
<arg>@{appargs}</arg>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>${platform}</arg>
<arg>ubuntu</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20230512 15:44:41.990" level="INFO">${platform} = ubuntu</msg>
<status status="PASS" starttime="20230512 15:44:41.989" endtime="20230512 15:44:41.990"/>
</kw>
<kw name="Set Confidence" library="ImageHorizonLibrary">
<arg>0.9</arg>
<doc>Sets the accuracy when finding images.</doc>
<status status="PASS" starttime="20230512 15:44:41.990" endtime="20230512 15:44:41.990"/>
</kw>
<kw name="Start Process" library="Process">
<arg>python3</arg>
<arg>${pyfile}</arg>
<arg>@{appargs}</arg>
<arg>alias=Reporter</arg>
<arg>stdout=${OUTPUT DIR}${/}stdout.txt</arg>
<arg>stderr=${OUTPUT DIR}${/}stderr.txt</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20230512 15:44:41.991" level="INFO">Starting process:
python3 /home/runner/work/rfswarm/rfswarm/rfswarm_reporter/rfswarm_reporter.py</msg>
<status status="PASS" starttime="20230512 15:44:41.990" endtime="20230512 15:44:41.996"/>
</kw>
<kw name="Set Screenshot Folder" library="ImageHorizonLibrary">
<arg>${OUTPUT DIR}</arg>
<doc>Sets the folder where screenshots are saved to.</doc>
<status status="PASS" starttime="20230512 15:44:41.996" endtime="20230512 15:44:41.996"/>
</kw>
<kw name="Take A Screenshot" library="ImageHorizonLibrary">
<doc>Takes a screenshot of the screen.</doc>
<msg timestamp="20230512 15:44:41.997" level="INFO" html="true">Screenshot taken: /home/runner/work/rfswarm/rfswarm/Tests/Regression/Reporter/Logs/ubuntu-latest_3.10/Reporter.GUIBasic-screenshot-1.png&lt;br/&gt;&lt;img src="/home/runner/work/rfswarm/rfswarm/Tests/Regression/Reporter/Logs/ubuntu-latest_3.10/Reporter.GUIBasic-screenshot-1.png" width="100%" /&gt;</msg>
<status status="PASS" starttime="20230512 15:44:41.997" endtime="20230512 15:44:42.159"/>
</kw>
<status status="PASS" starttime="20230512 15:44:41.989" endtime="20230512 15:44:42.159"/>
</kw>
<status status="PASS" starttime="20230512 15:44:41.985" endtime="20230512 15:44:42.159"/>
</kw>
<status status="PASS" starttime="20230512 15:44:41.980" endtime="20230512 15:44:42.159"/>
</kw>
<kw name="Wait For Status">
<arg>PreviewLoaded</arg>
<kw name="Convert To Lower Case" library="String">
<var>${statusl}</var>
<arg>${status}</arg>
<doc>Converts string to lower case.</doc>
<msg timestamp="20230512 15:44:42.161" level="INFO">${statusl} = previewloaded</msg>
<status status="PASS" starttime="20230512 15:44:42.160" endtime="20230512 15:44:42.161"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${img}</var>
<arg>reporter_${platform}_status_${statusl}.png</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20230512 15:44:42.161" level="INFO">${img} = reporter_ubuntu_status_previewloaded.png</msg>
<status status="PASS" starttime="20230512 15:44:42.161" endtime="20230512 15:44:42.161"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>/home/runner/work/rfswarm/rfswarm/Tests/Regression/Reporter</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230512 15:44:42.161" level="INFO">/home/runner/work/rfswarm/rfswarm/Tests/Regression/Reporter</msg>
<status status="PASS" starttime="20230512 15:44:42.161" endtime="20230512 15:44:42.162"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${IMAGE_DIR}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230512 15:44:42.162" level="INFO">/home/runner/work/rfswarm/rfswarm/Tests/Regression/Reporter/Images/file_method</msg>
<status status="PASS" starttime="20230512 15:44:42.162" endtime="20230512 15:44:42.162"/>
</kw>
<kw name="Wait For" library="ImageHorizonLibrary">
<arg>${img}</arg>
<arg>timeout=${timeout}</arg>
<doc>Tries to locate given image from the screen for given time.</doc>
<msg timestamp="20230512 15:44:54.548" level="INFO">Image "reporter_ubuntu_status_previewloaded.png" found at (59, 435)</msg>
<status status="PASS" starttime="20230512 15:44:42.162" endtime="20230512 15:44:54.549"/>
</kw>
<kw name="Locate" library="ImageHorizonLibrary">
<var>@{coordinates}</var>
<arg>${img}</arg>
<doc>Locate image on screen.</doc>
<msg timestamp="20230512 15:44:54.952" level="INFO">Image "/home/runner/work/rfswarm/rfswarm/Tests/Regression/Reporter/Images/file_method/reporter_ubuntu_status_previewloaded.png" found at Box(left=1, top=425, width=116, height=20)</msg>
<msg timestamp="20230512 15:44:54.952" level="INFO">@{coordinates} = [ 59 | 435 ]</msg>
<status status="PASS" starttime="20230512 15:44:54.549" endtime="20230512 15:44:54.952"/>
</kw>
<kw name="Click Image" library="ImageHorizonLibrary">
<arg>${img}</arg>
<doc>Finds the reference image on screen and clicks it once.</doc>
<msg timestamp="20230512 15:44:55.346" level="INFO">Image "/home/runner/work/rfswarm/rfswarm/Tests/Regression/Reporter/Images/file_method/reporter_ubuntu_status_previewloaded.png" found at Box(left=1, top=425, width=116, height=20)</msg>
<msg timestamp="20230512 15:44:55.347" level="INFO">Clicking image "reporter_ubuntu_status_previewloaded.png" in position (59, 435)</msg>
<status status="PASS" starttime="20230512 15:44:54.952" endtime="20230512 15:44:55.451"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>0.1</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20230512 15:44:55.552" level="INFO">Slept 100 milliseconds</msg>
<status status="PASS" starttime="20230512 15:44:55.451" endtime="20230512 15:44:55.552"/>
</kw>
<kw name="Take A Screenshot" library="ImageHorizonLibrary">
<doc>Takes a screenshot of the screen.</doc>
<msg timestamp="20230512 15:44:55.553" level="INFO" html="true">Screenshot taken: /home/runner/work/rfswarm/rfswarm/Tests/Regression/Reporter/Logs/ubuntu-latest_3.10/Reporter.GUIBasic-screenshot-2.png&lt;br/&gt;&lt;img src="/home/runner/work/rfswarm/rfswarm/Tests/Regression/Reporter/Logs/ubuntu-latest_3.10/Reporter.GUIBasic-screenshot-2.png" width="100%" /&gt;</msg>
<status status="PASS" starttime="20230512 15:44:55.552" endtime="20230512 15:44:55.708"/>
</kw>
<status status="PASS" starttime="20230512 15:44:42.160" endtime="20230512 15:44:55.708"/>
</kw>
<kw name="Close GUI">
<kw name="Set Variable" library="BuiltIn">
<var>${keyword}</var>
<arg>Close GUI ${platform}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20230512 15:44:55.709" level="INFO">${keyword} = Close GUI ubuntu</msg>
<status status="PASS" starttime="20230512 15:44:55.708" endtime="20230512 15:44:55.709"/>
</kw>
<kw name="Is Process Running" library="Process">
<var>${running}</var>
<arg>${process}</arg>
<doc>Checks is the process running or not.</doc>
<msg timestamp="20230512 15:44:55.709" level="INFO">${running} = True</msg>
<status status="PASS" starttime="20230512 15:44:55.709" endtime="20230512 15:44:55.709"/>
</kw>
<if>
<branch type="IF" condition="${running}">
<kw name="Run Keyword" library="BuiltIn">
<arg>${keyword}</arg>
<doc>Executes the given keyword with the given arguments.</doc>
<kw name="Close GUI ubuntu">
<kw name="Press Combination" library="ImageHorizonLibrary">
<arg>Key.esc</arg>
<doc>Press given keyboard keys.</doc>
<status status="PASS" starttime="20230512 15:44:55.714" endtime="20230512 15:44:55.819"/>
</kw>
<kw name="Press Combination" library="ImageHorizonLibrary">
<arg>x</arg>
<arg>Key.ctrl</arg>
<doc>Press given keyboard keys.</doc>
<status status="PASS" starttime="20230512 15:44:55.820" endtime="20230512 15:44:55.921"/>
</kw>
<kw name="End Process If Still Running">
<kw name="Wait For Process" library="Process">
<var>${result}</var>
<arg>${process}</arg>
<arg>timeout=60</arg>
<doc>Waits for the process to complete or to reach the given timeout.</doc>
<msg timestamp="20230512 15:44:55.922" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20230512 15:45:55.955" level="INFO">Process did not complete in 1 minute.</msg>
<msg timestamp="20230512 15:45:55.955" level="INFO">Leaving process intact.</msg>
<msg timestamp="20230512 15:45:55.956" level="INFO">${result} = None</msg>
<status status="PASS" starttime="20230512 15:44:55.922" endtime="20230512 15:45:55.956"/>
</kw>
<kw name="Is Process Running" library="Process">
<var>${running}</var>
<arg>${process}</arg>
<doc>Checks is the process running or not.</doc>
<msg timestamp="20230512 15:45:55.956" level="INFO">${running} = True</msg>
<status status="PASS" starttime="20230512 15:45:55.956" endtime="20230512 15:45:55.956"/>
</kw>
<if>
<branch type="IF" condition="not ${running}">
<kw name="Check Result">
<arg>${result}</arg>
<status status="NOT RUN" starttime="20230512 15:45:55.957" endtime="20230512 15:45:55.957"/>
</kw>
<status status="NOT RUN" starttime="20230512 15:45:55.956" endtime="20230512 15:45:55.957"/>
</branch>
<branch type="ELSE">
<kw name="Take A Screenshot" library="ImageHorizonLibrary">
<doc>Takes a screenshot of the screen.</doc>
<msg timestamp="20230512 15:45:55.957" level="INFO" html="true">Screenshot taken: /home/runner/work/rfswarm/rfswarm/Tests/Regression/Reporter/Logs/ubuntu-latest_3.10/Reporter.GUIBasic-screenshot-3.png&lt;br/&gt;&lt;img src="/home/runner/work/rfswarm/rfswarm/Tests/Regression/Reporter/Logs/ubuntu-latest_3.10/Reporter.GUIBasic-screenshot-3.png" width="100%" /&gt;</msg>
<status status="PASS" starttime="20230512 15:45:55.957" endtime="20230512 15:45:56.112"/>
</kw>
<kw name="Terminate Process" library="Process">
<var>${result}</var>
<arg>${process}</arg>
<doc>Stops the process gracefully or forcefully.</doc>
<msg timestamp="20230512 15:45:56.112" level="INFO">Gracefully terminating process.</msg>
<msg timestamp="20230512 15:45:56.214" level="INFO">Process completed.</msg>
<msg timestamp="20230512 15:45:56.214" level="INFO">${result} = &lt;result object with rc -15&gt;</msg>
<status status="PASS" starttime="20230512 15:45:56.112" endtime="20230512 15:45:56.214"/>
</kw>
<kw name="Check Result">
<arg>${result}</arg>
<kw name="Log" library="BuiltIn">
<arg>${result.stderr}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230512 15:45:56.216" level="INFO">findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.</msg>
<status status="PASS" starttime="20230512 15:45:56.215" endtime="20230512 15:45:56.216"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${result.stderr}</arg>
<arg>Traceback</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20230512 15:45:56.216" endtime="20230512 15:45:56.217"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${result.rc}</arg>
<arg>0</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230512 15:45:56.223" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<msg timestamp="20230512 15:45:56.223" level="FAIL">-15 != 0</msg>
<status status="FAIL" starttime="20230512 15:45:56.217" endtime="20230512 15:45:56.223"/>
</kw>
<status status="FAIL" starttime="20230512 15:45:56.214" endtime="20230512 15:45:56.224"/>
</kw>
<kw name="Fail" library="BuiltIn">
<arg>Had to Terminate Process</arg>
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<status status="NOT RUN" starttime="20230512 15:45:56.224" endtime="20230512 15:45:56.224"/>
</kw>
<status status="FAIL" starttime="20230512 15:45:55.957" endtime="20230512 15:45:56.224"/>
</branch>
<status status="FAIL" starttime="20230512 15:45:55.956" endtime="20230512 15:45:56.224"/>
</if>
<status status="FAIL" starttime="20230512 15:44:55.922" endtime="20230512 15:45:56.224"/>
</kw>
<status status="FAIL" starttime="20230512 15:44:55.714" endtime="20230512 15:45:56.224"/>
</kw>
<status status="FAIL" starttime="20230512 15:44:55.710" endtime="20230512 15:45:56.224"/>
</kw>
<status status="FAIL" starttime="20230512 15:44:55.710" endtime="20230512 15:45:56.224"/>
</branch>
<branch type="ELSE">
<kw name="Wait For Process" library="Process">
<var>${result}</var>
<arg>${process}</arg>
<arg>timeout=60</arg>
<doc>Waits for the process to complete or to reach the given timeout.</doc>
<status status="NOT RUN" starttime="20230512 15:45:56.225" endtime="20230512 15:45:56.225"/>
</kw>
<kw name="Check Result">
<arg>${result}</arg>
<status status="NOT RUN" starttime="20230512 15:45:56.225" endtime="20230512 15:45:56.225"/>
</kw>
<status status="NOT RUN" starttime="20230512 15:45:56.224" endtime="20230512 15:45:56.225"/>
</branch>
<status status="FAIL" starttime="20230512 15:44:55.709" endtime="20230512 15:45:56.225"/>
</if>
<status status="FAIL" starttime="20230512 15:44:55.708" endtime="20230512 15:45:56.225"/>
</kw>
<tag>macos-latest</tag>
<tag>ubuntu-latest</tag>
<tag>windows-latest</tag>
<status status="FAIL" starttime="20230512 15:44:41.979" endtime="20230512 15:45:56.225">-15 != 0</status>
</test>
<test id="s1-s2-t2" name="Select Preview Tab" line="20">
<kw name="Open GUI">
<kw name="Get Variables" library="BuiltIn">
<var>${var}</var>
<doc>Returns a dictionary containing all variables in the current scope.</doc>
<msg timestamp="20230512 15:45:56.227" level="INFO">${var} = {'${/}': '/', '${:}': ':', '${\\n}': '\n', '${DEBUG_FILE}': 'NONE', '${EXECDIR}': '/home/runner/work/rfswarm/rfswarm', '${False}': False, '${IMAGE_DIR}': '/home/runner/work/rfswarm/rfswarm/Tests/Regre...</msg>
<status status="PASS" starttime="20230512 15:45:56.226" endtime="20230512 15:45:56.227"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${var}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230512 15:45:56.228" level="INFO">{'${/}': '/', '${:}': ':', '${\\n}': '\n', '${DEBUG_FILE}': 'NONE', '${EXECDIR}': '/home/runner/work/rfswarm/rfswarm', '${False}': False, '${IMAGE_DIR}': '/home/runner/work/rfswarm/rfswarm/Tests/Regression/Reporter/Images/file_method', '${LOG_FILE}': '/home/runner/work/rfswarm/rfswarm/Tests/Regression/Reporter/Logs/ubuntu-latest_3.10/log.html', '${LOG_LEVEL}': 'INFO', '${None}': None, '${null}': None, '${OUTPUT_DIR}': '/home/runner/work/rfswarm/rfswarm/Tests/Regression/Reporter/Logs/ubuntu-latest_3.10', '${OUTPUT_FILE}': '/home/runner/work/rfswarm/rfswarm/Tests/Regression/Reporter/Logs/ubuntu-latest_3.10/output.xml', '${platform}': 'ubuntu', '${PREV_TEST_MESSAGE}': '-15 != 0', '${PREV_TEST_NAME}': 'GUI Runs and Closes', '${PREV_TEST_STATUS}': 'FAIL', '${process}': 'None', '${pyfile}': '/home/runner/work/rfswarm/rfswarm/rfswarm_reporter/rfswarm_reporter.py', '${REPORT_FILE}': '/home/runner/work/rfswarm/rfswarm/Tests/Regression/Reporter/Logs/ubuntu-latest_3.10/report.html', '${SPACE}': ' ', '${SUITE_DOCUMENTATION}': '', '${SUITE_NAME}': 'Reporter.GUI Basic', '${SUITE_SOURCE}': '/home/runner/work/rfswarm/rfswarm/Tests/Regression/Reporter/GUI_Basic.robot', '${TEMPDIR}': '/tmp', '${TEST_DOCUMENTATION}': '', '${TEST_NAME}': 'Select Preview Tab', '${True}': True, '&amp;{OPTIONS}': {'include': ['ubuntu-latest'], 'exclude': [], 'skip': [], 'skip_on_failure': []}, '&amp;{SUITE_METADATA}': &lt;robot.utils.normalizing.NormalizedDict object at 0x7f9b0a7a2770&gt;, '@{appargs}': [], '@{TEST_TAGS}': ['macos-latest', 'ubuntu-latest', 'windows-latest']}</msg>
<status status="PASS" starttime="20230512 15:45:56.228" endtime="20230512 15:45:56.228"/>
</kw>
<kw name="Get Platform">
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{platforms}</var>
<arg>Linux=ubuntu</arg>
<arg>Darwin=macos</arg>
<arg>Java=notsupported</arg>
<arg>Windows=windows</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20230512 15:45:56.229" level="INFO">&amp;{platforms} = { Linux=ubuntu | Darwin=macos | Java=notsupported | Windows=windows }</msg>
<status status="PASS" starttime="20230512 15:45:56.228" endtime="20230512 15:45:56.229"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${os}</var>
<arg>platform.system()</arg>
<arg>platform</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20230512 15:45:56.229" level="INFO">${os} = Linux</msg>
<status status="PASS" starttime="20230512 15:45:56.229" endtime="20230512 15:45:56.230"/>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>${platform}</arg>
<arg>${platforms}[${os}]</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20230512 15:45:56.230" level="INFO">${platform} = ubuntu</msg>
<status status="PASS" starttime="20230512 15:45:56.230" endtime="20230512 15:45:56.230"/>
</kw>
<status status="PASS" starttime="20230512 15:45:56.228" endtime="20230512 15:45:56.230"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${keyword}</var>
<arg>Open GUI ${platform}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20230512 15:45:56.231" level="INFO">${keyword} = Open GUI ubuntu</msg>
<status status="PASS" starttime="20230512 15:45:56.230" endtime="20230512 15:45:56.231"/>
</kw>
<kw name="Run Keyword" library="BuiltIn">
<arg>${keyword}</arg>
<arg>@{appargs}</arg>
<doc>Executes the given keyword with the given arguments.</doc>
<kw name="Open GUI ubuntu">
<arg>@{appargs}</arg>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>${platform}</arg>
<arg>ubuntu</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20230512 15:45:56.235" level="INFO">${platform} = ubuntu</msg>
<status status="PASS" starttime="20230512 15:45:56.235" endtime="20230512 15:45:56.235"/>
</kw>
<kw name="Set Confidence" library="ImageHorizonLibrary">
<arg>0.9</arg>
<doc>Sets the accuracy when finding images.</doc>
<status status="PASS" starttime="20230512 15:45:56.235" endtime="20230512 15:45:56.235"/>
</kw>
<kw name="Start Process" library="Process">
<arg>python3</arg>
<arg>${pyfile}</arg>
<arg>@{appargs}</arg>
<arg>alias=Reporter</arg>
<arg>stdout=${OUTPUT DIR}${/}stdout.txt</arg>
<arg>stderr=${OUTPUT DIR}${/}stderr.txt</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20230512 15:45:56.237" level="INFO">Starting process:
python3 /home/runner/work/rfswarm/rfswarm/rfswarm_reporter/rfswarm_reporter.py</msg>
<status status="PASS" starttime="20230512 15:45:56.235" endtime="20230512 15:45:56.242"/>
</kw>
<kw name="Set Screenshot Folder" library="ImageHorizonLibrary">
<arg>${OUTPUT DIR}</arg>
<doc>Sets the folder where screenshots are saved to.</doc>
<status status="PASS" starttime="20230512 15:45:56.243" endtime="20230512 15:45:56.243"/>
</kw>
<kw name="Take A Screenshot" library="ImageHorizonLibrary">
<doc>Takes a screenshot of the screen.</doc>
<msg timestamp="20230512 15:45:56.244" level="INFO" html="true">Screenshot taken: /home/runner/work/rfswarm/rfswarm/Tests/Regression/Reporter/Logs/ubuntu-latest_3.10/Reporter.GUIBasic-screenshot-4.png&lt;br/&gt;&lt;img src="/home/runner/work/rfswarm/rfswarm/Tests/Regression/Reporter/Logs/ubuntu-latest_3.10/Reporter.GUIBasic-screenshot-4.png" width="100%" /&gt;</msg>
<status status="PASS" starttime="20230512 15:45:56.244" endtime="20230512 15:45:56.400"/>
</kw>
<status status="PASS" starttime="20230512 15:45:56.234" endtime="20230512 15:45:56.401"/>
</kw>
<status status="PASS" starttime="20230512 15:45:56.231" endtime="20230512 15:45:56.401"/>
</kw>
<status status="PASS" starttime="20230512 15:45:56.226" endtime="20230512 15:45:56.401"/>
</kw>
<kw name="Wait For Status">
<arg>PreviewLoaded</arg>
<kw name="Convert To Lower Case" library="String">
<var>${statusl}</var>
<arg>${status}</arg>
<doc>Converts string to lower case.</doc>
<msg timestamp="20230512 15:45:56.402" level="INFO">${statusl} = previewloaded</msg>
<status status="PASS" starttime="20230512 15:45:56.402" endtime="20230512 15:45:56.402"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${img}</var>
<arg>reporter_${platform}_status_${statusl}.png</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20230512 15:45:56.402" level="INFO">${img} = reporter_ubuntu_status_previewloaded.png</msg>
<status status="PASS" starttime="20230512 15:45:56.402" endtime="20230512 15:45:56.402"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>/home/runner/work/rfswarm/rfswarm/Tests/Regression/Reporter</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230512 15:45:56.403" level="INFO">/home/runner/work/rfswarm/rfswarm/Tests/Regression/Reporter</msg>
<status status="PASS" starttime="20230512 15:45:56.403" endtime="20230512 15:45:56.403"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${IMAGE_DIR}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230512 15:45:56.403" level="INFO">/home/runner/work/rfswarm/rfswarm/Tests/Regression/Reporter/Images/file_method</msg>
<status status="PASS" starttime="20230512 15:45:56.403" endtime="20230512 15:45:56.403"/>
</kw>
<kw name="Wait For" library="ImageHorizonLibrary">
<arg>${img}</arg>
<arg>timeout=${timeout}</arg>
<doc>Tries to locate given image from the screen for given time.</doc>
<msg timestamp="20230512 15:46:07.532" level="INFO">Image "reporter_ubuntu_status_previewloaded.png" found at (59, 435)</msg>
<status status="PASS" starttime="20230512 15:45:56.404" endtime="20230512 15:46:07.533"/>
</kw>
<kw name="Locate" library="ImageHorizonLibrary">
<var>@{coordinates}</var>
<arg>${img}</arg>
<doc>Locate image on screen.</doc>
<msg timestamp="20230512 15:46:07.946" level="INFO">Image "/home/runner/work/rfswarm/rfswarm/Tests/Regression/Reporter/Images/file_method/reporter_ubuntu_status_previewloaded.png" found at Box(left=1, top=425, width=116, height=20)</msg>
<msg timestamp="20230512 15:46:07.946" level="INFO">@{coordinates} = [ 59 | 435 ]</msg>
<status status="PASS" starttime="20230512 15:46:07.533" endtime="20230512 15:46:07.946"/>
</kw>
<kw name="Click Image" library="ImageHorizonLibrary">
<arg>${img}</arg>
<doc>Finds the reference image on screen and clicks it once.</doc>
<msg timestamp="20230512 15:46:08.358" level="INFO">Image "/home/runner/work/rfswarm/rfswarm/Tests/Regression/Reporter/Images/file_method/reporter_ubuntu_status_previewloaded.png" found at Box(left=1, top=425, width=116, height=20)</msg>
<msg timestamp="20230512 15:46:08.358" level="INFO">Clicking image "reporter_ubuntu_status_previewloaded.png" in position (59, 435)</msg>
<status status="PASS" starttime="20230512 15:46:07.947" endtime="20230512 15:46:08.461"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>0.1</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20230512 15:46:08.562" level="INFO">Slept 100 milliseconds</msg>
<status status="PASS" starttime="20230512 15:46:08.461" endtime="20230512 15:46:08.562"/>
</kw>
<kw name="Take A Screenshot" library="ImageHorizonLibrary">
<doc>Takes a screenshot of the screen.</doc>
<msg timestamp="20230512 15:46:08.563" level="INFO" html="true">Screenshot taken: /home/runner/work/rfswarm/rfswarm/Tests/Regression/Reporter/Logs/ubuntu-latest_3.10/Reporter.GUIBasic-screenshot-5.png&lt;br/&gt;&lt;img src="/home/runner/work/rfswarm/rfswarm/Tests/Regression/Reporter/Logs/ubuntu-latest_3.10/Reporter.GUIBasic-screenshot-5.png" width="100%" /&gt;</msg>
<status status="PASS" starttime="20230512 15:46:08.562" endtime="20230512 15:46:08.719"/>
</kw>
<status status="PASS" starttime="20230512 15:45:56.401" endtime="20230512 15:46:08.719"/>
</kw>
<kw name="Click Tab">
<arg>Preview</arg>
<kw name="Convert To Lower Case" library="String">
<var>${tabnamel}</var>
<arg>${tabname}</arg>
<doc>Converts string to lower case.</doc>
<msg timestamp="20230512 15:46:08.720" level="INFO">${tabnamel} = preview</msg>
<status status="PASS" starttime="20230512 15:46:08.720" endtime="20230512 15:46:08.720"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${img}</var>
<arg>reporter_${platform}_tab_${tabnamel}.png</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20230512 15:46:08.720" level="INFO">${img} = reporter_ubuntu_tab_preview.png</msg>
<status status="PASS" starttime="20230512 15:46:08.720" endtime="20230512 15:46:08.720"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>/home/runner/work/rfswarm/rfswarm/Tests/Regression/Reporter</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230512 15:46:08.721" level="INFO">/home/runner/work/rfswarm/rfswarm/Tests/Regression/Reporter</msg>
<status status="PASS" starttime="20230512 15:46:08.721" endtime="20230512 15:46:08.721"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${IMAGE_DIR}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230512 15:46:08.722" level="INFO">/home/runner/work/rfswarm/rfswarm/Tests/Regression/Reporter/Images/file_method</msg>
<status status="PASS" starttime="20230512 15:46:08.721" endtime="20230512 15:46:08.722"/>
</kw>
<kw name="Wait For" library="ImageHorizonLibrary">
<arg>${img}</arg>
<arg>timeout=300</arg>
<doc>Tries to locate given image from the screen for given time.</doc>
<msg timestamp="20230512 15:46:09.116" level="INFO">Image "reporter_ubuntu_tab_preview.png" found at (268, 93)</msg>
<status status="PASS" starttime="20230512 15:46:08.722" endtime="20230512 15:46:09.116"/>
</kw>
<kw name="Locate" library="ImageHorizonLibrary">
<var>@{coordinates}</var>
<arg>${img}</arg>
<doc>Locate image on screen.</doc>
<msg timestamp="20230512 15:46:09.505" level="INFO">Image "/home/runner/work/rfswarm/rfswarm/Tests/Regression/Reporter/Images/file_method/reporter_ubuntu_tab_preview.png" found at Box(left=229, top=79, width=78, height=29)</msg>
<msg timestamp="20230512 15:46:09.505" level="INFO">@{coordinates} = [ 268 | 93 ]</msg>
<status status="PASS" starttime="20230512 15:46:09.116" endtime="20230512 15:46:09.505"/>
</kw>
<kw name="Click Image" library="ImageHorizonLibrary">
<arg>${img}</arg>
<doc>Finds the reference image on screen and clicks it once.</doc>
<msg timestamp="20230512 15:46:09.893" level="INFO">Image "/home/runner/work/rfswarm/rfswarm/Tests/Regression/Reporter/Images/file_method/reporter_ubuntu_tab_preview.png" found at Box(left=229, top=79, width=78, height=29)</msg>
<msg timestamp="20230512 15:46:09.894" level="INFO">Clicking image "reporter_ubuntu_tab_preview.png" in position (268, 93)</msg>
<status status="PASS" starttime="20230512 15:46:09.505" endtime="20230512 15:46:09.997"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>0.1</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20230512 15:46:10.098" level="INFO">Slept 100 milliseconds</msg>
<status status="PASS" starttime="20230512 15:46:09.998" endtime="20230512 15:46:10.098"/>
</kw>
<kw name="Take A Screenshot" library="ImageHorizonLibrary">
<doc>Takes a screenshot of the screen.</doc>
<msg timestamp="20230512 15:46:10.099" level="INFO" html="true">Screenshot taken: /home/runner/work/rfswarm/rfswarm/Tests/Regression/Reporter/Logs/ubuntu-latest_3.10/Reporter.GUIBasic-screenshot-6.png&lt;br/&gt;&lt;img src="/home/runner/work/rfswarm/rfswarm/Tests/Regression/Reporter/Logs/ubuntu-latest_3.10/Reporter.GUIBasic-screenshot-6.png" width="100%" /&gt;</msg>
<status status="PASS" starttime="20230512 15:46:10.099" endtime="20230512 15:46:10.254"/>
</kw>
<status status="PASS" starttime="20230512 15:46:08.719" endtime="20230512 15:46:10.254"/>
</kw>
<kw name="Close GUI">
<kw name="Set Variable" library="BuiltIn">
<var>${keyword}</var>
<arg>Close GUI ${platform}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20230512 15:46:10.255" level="INFO">${keyword} = Close GUI ubuntu</msg>
<status status="PASS" starttime="20230512 15:46:10.255" endtime="20230512 15:46:10.255"/>
</kw>
<kw name="Is Process Running" library="Process">
<var>${running}</var>
<arg>${process}</arg>
<doc>Checks is the process running or not.</doc>
<msg timestamp="20230512 15:46:10.256" level="INFO">${running} = True</msg>
<status status="PASS" starttime="20230512 15:46:10.256" endtime="20230512 15:46:10.256"/>
</kw>
<if>
<branch type="IF" condition="${running}">
<kw name="Run Keyword" library="BuiltIn">
<arg>${keyword}</arg>
<doc>Executes the given keyword with the given arguments.</doc>
<kw name="Close GUI ubuntu">
<kw name="Press Combination" library="ImageHorizonLibrary">
<arg>Key.esc</arg>
<doc>Press given keyboard keys.</doc>
<status status="PASS" starttime="20230512 15:46:10.262" endtime="20230512 15:46:10.363"/>
</kw>
<kw name="Press Combination" library="ImageHorizonLibrary">
<arg>x</arg>
<arg>Key.ctrl</arg>
<doc>Press given keyboard keys.</doc>
<status status="PASS" starttime="20230512 15:46:10.363" endtime="20230512 15:46:10.466"/>
</kw>
<kw name="End Process If Still Running">
<kw name="Wait For Process" library="Process">
<var>${result}</var>
<arg>${process}</arg>
<arg>timeout=60</arg>
<doc>Waits for the process to complete or to reach the given timeout.</doc>
<msg timestamp="20230512 15:46:10.467" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20230512 15:47:10.501" level="INFO">Process did not complete in 1 minute.</msg>
<msg timestamp="20230512 15:47:10.501" level="INFO">Leaving process intact.</msg>
<msg timestamp="20230512 15:47:10.502" level="INFO">${result} = None</msg>
<status status="PASS" starttime="20230512 15:46:10.467" endtime="20230512 15:47:10.502"/>
</kw>
<kw name="Is Process Running" library="Process">
<var>${running}</var>
<arg>${process}</arg>
<doc>Checks is the process running or not.</doc>
<msg timestamp="20230512 15:47:10.502" level="INFO">${running} = True</msg>
<status status="PASS" starttime="20230512 15:47:10.502" endtime="20230512 15:47:10.502"/>
</kw>
<if>
<branch type="IF" condition="not ${running}">
<kw name="Check Result">
<arg>${result}</arg>
<status status="NOT RUN" starttime="20230512 15:47:10.503" endtime="20230512 15:47:10.503"/>
</kw>
<status status="NOT RUN" starttime="20230512 15:47:10.502" endtime="20230512 15:47:10.503"/>
</branch>
<branch type="ELSE">
<kw name="Take A Screenshot" library="ImageHorizonLibrary">
<doc>Takes a screenshot of the screen.</doc>
<msg timestamp="20230512 15:47:10.504" level="INFO" html="true">Screenshot taken: /home/runner/work/rfswarm/rfswarm/Tests/Regression/Reporter/Logs/ubuntu-latest_3.10/Reporter.GUIBasic-screenshot-7.png&lt;br/&gt;&lt;img src="/home/runner/work/rfswarm/rfswarm/Tests/Regression/Reporter/Logs/ubuntu-latest_3.10/Reporter.GUIBasic-screenshot-7.png" width="100%" /&gt;</msg>
<status status="PASS" starttime="20230512 15:47:10.503" endtime="20230512 15:47:10.674"/>
</kw>
<kw name="Terminate Process" library="Process">
<var>${result}</var>
<arg>${process}</arg>
<doc>Stops the process gracefully or forcefully.</doc>
<msg timestamp="20230512 15:47:10.675" level="INFO">Gracefully terminating process.</msg>
<msg timestamp="20230512 15:47:10.775" level="INFO">Process completed.</msg>
<msg timestamp="20230512 15:47:10.776" level="INFO">${result} = &lt;result object with rc -15&gt;</msg>
<status status="PASS" starttime="20230512 15:47:10.674" endtime="20230512 15:47:10.776"/>
</kw>
<kw name="Check Result">
<arg>${result}</arg>
<kw name="Log" library="BuiltIn">
<arg>${result.stderr}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230512 15:47:10.777" level="INFO">findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.
findfont: Font family 'Rasa' not found.</msg>
<status status="PASS" starttime="20230512 15:47:10.776" endtime="20230512 15:47:10.778"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${result.stderr}</arg>
<arg>Traceback</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20230512 15:47:10.778" endtime="20230512 15:47:10.778"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${result.rc}</arg>
<arg>0</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230512 15:47:10.779" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<msg timestamp="20230512 15:47:10.779" level="FAIL">-15 != 0</msg>
<status status="FAIL" starttime="20230512 15:47:10.779" endtime="20230512 15:47:10.779"/>
</kw>
<status status="FAIL" starttime="20230512 15:47:10.776" endtime="20230512 15:47:10.780"/>
</kw>
<kw name="Fail" library="BuiltIn">
<arg>Had to Terminate Process</arg>
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<status status="NOT RUN" starttime="20230512 15:47:10.780" endtime="20230512 15:47:10.780"/>
</kw>
<status status="FAIL" starttime="20230512 15:47:10.503" endtime="20230512 15:47:10.780"/>
</branch>
<status status="FAIL" starttime="20230512 15:47:10.502" endtime="20230512 15:47:10.780"/>
</if>
<status status="FAIL" starttime="20230512 15:46:10.467" endtime="20230512 15:47:10.780"/>
</kw>
<status status="FAIL" starttime="20230512 15:46:10.262" endtime="20230512 15:47:10.780"/>
</kw>
<status status="FAIL" starttime="20230512 15:46:10.256" endtime="20230512 15:47:10.780"/>
</kw>
<status status="FAIL" starttime="20230512 15:46:10.256" endtime="20230512 15:47:10.780"/>
</branch>
<branch type="ELSE">
<kw name="Wait For Process" library="Process">
<var>${result}</var>
<arg>${process}</arg>
<arg>timeout=60</arg>
<doc>Waits for the process to complete or to reach the given timeout.</doc>
<status status="NOT RUN" starttime="20230512 15:47:10.781" endtime="20230512 15:47:10.781"/>
</kw>
<kw name="Check Result">
<arg>${result}</arg>
<status status="NOT RUN" starttime="20230512 15:47:10.781" endtime="20230512 15:47:10.781"/>
</kw>
<status status="NOT RUN" starttime="20230512 15:47:10.780" endtime="20230512 15:47:10.781"/>
</branch>
<status status="FAIL" starttime="20230512 15:46:10.256" endtime="20230512 15:47:10.781"/>
</if>
<status status="FAIL" starttime="20230512 15:46:10.255" endtime="20230512 15:47:10.781"/>
</kw>
<tag>macos-latest</tag>
<tag>ubuntu-latest</tag>
<tag>windows-latest</tag>
<status status="FAIL" starttime="20230512 15:45:56.226" endtime="20230512 15:47:10.781">-15 != 0</status>
</test>
<test id="s1-s2-t3" name="First Run" line="27">
<kw name="Get Time" library="BuiltIn">
<var>${epoch}</var>
<arg>epoch</arg>
<doc>Returns the given time in the requested format.</doc>
<msg timestamp="20230512 15:47:10.783" level="INFO">${epoch} = 1683906430</msg>
<status status="PASS" starttime="20230512 15:47:10.783" endtime="20230512 15:47:10.783"/>
</kw>
<kw name="Open GUI">
<arg>-i</arg>
<arg>blank_${epoch}.ini</arg>
<kw name="Get Variables" library="BuiltIn">
<var>${var}</var>
<doc>Returns a dictionary containing all variables in the current scope.</doc>
<msg timestamp="20230512 15:47:10.785" level="INFO">${var} = {'${/}': '/', '${:}': ':', '${\\n}': '\n', '${DEBUG_FILE}': 'NONE', '${EXECDIR}': '/home/runner/work/rfswarm/rfswarm', '${False}': False, '${IMAGE_DIR}': '/home/runner/work/rfswarm/rfswarm/Tests/Regre...</msg>
<status status="PASS" starttime="20230512 15:47:10.784" endtime="20230512 15:47:10.785"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${var}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230512 15:47:10.785" level="INFO">{'${/}': '/', '${:}': ':', '${\\n}': '\n', '${DEBUG_FILE}': 'NONE', '${EXECDIR}': '/home/runner/work/rfswarm/rfswarm', '${False}': False, '${IMAGE_DIR}': '/home/runner/work/rfswarm/rfswarm/Tests/Regression/Reporter/Images/file_method', '${LOG_FILE}': '/home/runner/work/rfswarm/rfswarm/Tests/Regression/Reporter/Logs/ubuntu-latest_3.10/log.html', '${LOG_LEVEL}': 'INFO', '${None}': None, '${null}': None, '${OUTPUT_DIR}': '/home/runner/work/rfswarm/rfswarm/Tests/Regression/Reporter/Logs/ubuntu-latest_3.10', '${OUTPUT_FILE}': '/home/runner/work/rfswarm/rfswarm/Tests/Regression/Reporter/Logs/ubuntu-latest_3.10/output.xml', '${platform}': 'ubuntu', '${PREV_TEST_MESSAGE}': '-15 != 0', '${PREV_TEST_NAME}': 'Select Preview Tab', '${PREV_TEST_STATUS}': 'FAIL', '${process}': 'None', '${pyfile}': '/home/runner/work/rfswarm/rfswarm/rfswarm_reporter/rfswarm_reporter.py', '${REPORT_FILE}': '/home/runner/work/rfswarm/rfswarm/Tests/Regression/Reporter/Logs/ubuntu-latest_3.10/report.html', '${SPACE}': ' ', '${SUITE_DOCUMENTATION}': '', '${SUITE_NAME}': 'Reporter.GUI Basic', '${SUITE_SOURCE}': '/home/runner/work/rfswarm/rfswarm/Tests/Regression/Reporter/GUI_Basic.robot', '${TEMPDIR}': '/tmp', '${TEST_DOCUMENTATION}': '', '${TEST_NAME}': 'First Run', '${True}': True, '&amp;{OPTIONS}': {'include': ['ubuntu-latest'], 'exclude': [], 'skip': [], 'skip_on_failure': []}, '&amp;{SUITE_METADATA}': &lt;robot.utils.normalizing.NormalizedDict object at 0x7f9b0a7a2770&gt;, '@{appargs}': ['-i', 'blank_1683906430.ini'], '@{TEST_TAGS}': ['Issue #147', 'macos-latest', 'ubuntu-latest', 'windows-latest']}</msg>
<status status="PASS" starttime="20230512 15:47:10.785" endtime="20230512 15:47:10.785"/>
</kw>
<kw name="Get Platform">
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{platforms}</var>
<arg>Linux=ubuntu</arg>
<arg>Darwin=macos</arg>
<arg>Java=notsupported</arg>
<arg>Windows=windows</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20230512 15:47:10.786" level="INFO">&amp;{platforms} = { Linux=ubuntu | Darwin=macos | Java=notsupported | Windows=windows }</msg>
<status status="PASS" starttime="20230512 15:47:10.786" endtime="20230512 15:47:10.786"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${os}</var>
<arg>platform.system()</arg>
<arg>platform</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20230512 15:47:10.787" level="INFO">${os} = Linux</msg>
<status status="PASS" starttime="20230512 15:47:10.786" endtime="20230512 15:47:10.787"/>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>${platform}</arg>
<arg>${platforms}[${os}]</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20230512 15:47:10.787" level="INFO">${platform} = ubuntu</msg>
<status status="PASS" starttime="20230512 15:47:10.787" endtime="20230512 15:47:10.787"/>
</kw>
<status status="PASS" starttime="20230512 15:47:10.786" endtime="20230512 15:47:10.788"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${keyword}</var>
<arg>Open GUI ${platform}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20230512 15:47:10.788" level="INFO">${keyword} = Open GUI ubuntu</msg>
<status status="PASS" starttime="20230512 15:47:10.788" endtime="20230512 15:47:10.788"/>
</kw>
<kw name="Run Keyword" library="BuiltIn">
<arg>${keyword}</arg>
<arg>@{appargs}</arg>
<doc>Executes the given keyword with the given arguments.</doc>
<kw name="Open GUI ubuntu">
<arg>@{appargs}</arg>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>${platform}</arg>
<arg>ubuntu</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20230512 15:47:10.793" level="INFO">${platform} = ubuntu</msg>
<status status="PASS" starttime="20230512 15:47:10.792" endtime="20230512 15:47:10.793"/>
</kw>
<kw name="Set Confidence" library="ImageHorizonLibrary">
<arg>0.9</arg>
<doc>Sets the accuracy when finding images.</doc>
<status status="PASS" starttime="20230512 15:47:10.793" endtime="20230512 15:47:10.793"/>
</kw>
<kw name="Start Process" library="Process">
<arg>python3</arg>
<arg>${pyfile}</arg>
<arg>@{appargs}</arg>
<arg>alias=Reporter</arg>
<arg>stdout=${OUTPUT DIR}${/}stdout.txt</arg>
<arg>stderr=${OUTPUT DIR}${/}stderr.txt</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20230512 15:47:10.795" level="INFO">Starting process:
python3 /home/runner/work/rfswarm/rfswarm/rfswarm_reporter/rfswarm_reporter.py -i blank_1683906430.ini</msg>
<status status="PASS" starttime="20230512 15:47:10.793" endtime="20230512 15:47:10.801"/>
</kw>
<kw name="Set Screenshot Folder" library="ImageHorizonLibrary">
<arg>${OUTPUT DIR}</arg>
<doc>Sets the folder where screenshots are saved to.</doc>
<status status="PASS" starttime="20230512 15:47:10.801" endtime="20230512 15:47:10.802"/>
</kw>
<kw name="Take A Screenshot" library="ImageHorizonLibrary">
<doc>Takes a screenshot of the screen.</doc>
<msg timestamp="20230512 15:47:10.802" level="INFO" html="true">Screenshot taken: /home/runner/work/rfswarm/rfswarm/Tests/Regression/Reporter/Logs/ubuntu-latest_3.10/Reporter.GUIBasic-screenshot-8.png&lt;br/&gt;&lt;img src="/home/runner/work/rfswarm/rfswarm/Tests/Regression/Reporter/Logs/ubuntu-latest_3.10/Reporter.GUIBasic-screenshot-8.png" width="100%" /&gt;</msg>
<status status="PASS" starttime="20230512 15:47:10.802" endtime="20230512 15:47:10.962"/>
</kw>
<status status="PASS" starttime="20230512 15:47:10.792" endtime="20230512 15:47:10.962"/>
</kw>
<status status="PASS" starttime="20230512 15:47:10.788" endtime="20230512 15:47:10.962"/>
</kw>
<status status="PASS" starttime="20230512 15:47:10.784" endtime="20230512 15:47:10.963"/>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<arg>Wait For Status</arg>
<arg>PreviewLoaded</arg>
<arg>60</arg>
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<kw name="Wait For Status">
<arg>PreviewLoaded</arg>
<arg>60</arg>
<kw name="Convert To Lower Case" library="String">
<var>${statusl}</var>
<arg>${status}</arg>
<doc>Converts string to lower case.</doc>
<msg timestamp="20230512 15:47:10.964" level="INFO">${statusl} = previewloaded</msg>
<status status="PASS" starttime="20230512 15:47:10.964" endtime="20230512 15:47:10.964"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${img}</var>
<arg>reporter_${platform}_status_${statusl}.png</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20230512 15:47:10.965" level="INFO">${img} = reporter_ubuntu_status_previewloaded.png</msg>
<status status="PASS" starttime="20230512 15:47:10.964" endtime="20230512 15:47:10.965"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>/home/runner/work/rfswarm/rfswarm/Tests/Regression/Reporter</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230512 15:47:10.965" level="INFO">/home/runner/work/rfswarm/rfswarm/Tests/Regression/Reporter</msg>
<status status="PASS" starttime="20230512 15:47:10.965" endtime="20230512 15:47:10.965"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${IMAGE_DIR}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230512 15:47:10.965" level="INFO">/home/runner/work/rfswarm/rfswarm/Tests/Regression/Reporter/Images/file_method</msg>
<status status="PASS" starttime="20230512 15:47:10.965" endtime="20230512 15:47:10.966"/>
</kw>
<kw name="Wait For" library="ImageHorizonLibrary">
<arg>${img}</arg>
<arg>timeout=${timeout}</arg>
<doc>Tries to locate given image from the screen for given time.</doc>
<kw name="Take A Screenshot" library="ImageHorizonLibrary">
<doc>Takes a screenshot of the screen.</doc>
<msg timestamp="20230512 15:48:11.092" level="INFO" html="true">Screenshot taken: /home/runner/work/rfswarm/rfswarm/Tests/Regression/Reporter/Logs/ubuntu-latest_3.10/Reporter.GUIBasic-screenshot-9.png&lt;br/&gt;&lt;img src="/home/runner/work/rfswarm/rfswarm/Tests/Regression/Reporter/Logs/ubuntu-latest_3.10/Reporter.GUIBasic-screenshot-9.png" width="100%" /&gt;</msg>
<status status="PASS" starttime="20230512 15:48:11.092" endtime="20230512 15:48:11.245"/>
</kw>
<msg timestamp="20230512 15:48:11.245" level="FAIL">ImageNotFoundException: Reference image "/home/runner/work/rfswarm/rfswarm/Tests/Regression/Reporter/Images/file_method/reporter_ubuntu_status_previewloaded.png" was not found on screen</msg>
<status status="FAIL" starttime="20230512 15:47:10.966" endtime="20230512 15:48:11.246"/>
</kw>
<kw name="Locate" library="ImageHorizonLibrary">
<var>@{coordinates}</var>
<arg>${img}</arg>
<doc>Locate image on screen.</doc>
<status status="NOT RUN" starttime="20230512 15:48:11.246" endtime="20230512 15:48:11.246"/>
</kw>
<kw name="Click Image" library="ImageHorizonLibrary">
<arg>${img}</arg>
<doc>Finds the reference image on screen and clicks it once.</doc>
<status status="NOT RUN" starttime="20230512 15:48:11.246" endtime="20230512 15:48:11.246"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>0.1</arg>
<doc>Pauses the test executed for the given time.</doc>
<status status="NOT RUN" starttime="20230512 15:48:11.246" endtime="20230512 15:48:11.246"/>
</kw>
<kw name="Take A Screenshot" library="ImageHorizonLibrary">
<doc>Takes a screenshot of the screen.</doc>
<status status="NOT RUN" starttime="20230512 15:48:11.247" endtime="20230512 15:48:11.247"/>
</kw>
<status status="FAIL" starttime="20230512 15:47:10.963" endtime="20230512 15:48:11.247"/>
</kw>
<status status="FAIL" starttime="20230512 15:47:10.963" endtime="20230512 15:48:11.247"/>
</kw>
<kw name="Close GUI">
<kw name="Set Variable" library="BuiltIn">
<var>${keyword}</var>
<arg>Close GUI ${platform}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20230512 15:48:11.248" level="INFO">${keyword} = Close GUI ubuntu</msg>
<status status="PASS" starttime="20230512 15:48:11.248" endtime="20230512 15:48:11.248"/>
</kw>
<kw name="Is Process Running" library="Process">
<var>${running}</var>
<arg>${process}</arg>
<doc>Checks is the process running or not.</doc>
<msg timestamp="20230512 15:48:11.249" level="INFO">${running} = False</msg>
<status status="PASS" starttime="20230512 15:48:11.248" endtime="20230512 15:48:11.249"/>
</kw>
<if>
<branch type="IF" condition="${running}">
<kw name="Run Keyword" library="BuiltIn">
<arg>${keyword}</arg>
<doc>Executes the given keyword with the given arguments.</doc>
<status status="NOT RUN" starttime="20230512 15:48:11.249" endtime="20230512 15:48:11.249"/>
</kw>
<status status="NOT RUN" starttime="20230512 15:48:11.249" endtime="20230512 15:48:11.249"/>
</branch>
<branch type="ELSE">
<kw name="Wait For Process" library="Process">
<var>${result}</var>
<arg>${process}</arg>
<arg>timeout=60</arg>
<doc>Waits for the process to complete or to reach the given timeout.</doc>
<msg timestamp="20230512 15:48:11.250" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20230512 15:48:11.250" level="INFO">Process completed.</msg>
<msg timestamp="20230512 15:48:11.250" level="INFO">${result} = &lt;result object with rc 1&gt;</msg>
<status status="PASS" starttime="20230512 15:48:11.249" endtime="20230512 15:48:11.250"/>
</kw>
<kw name="Check Result">
<arg>${result}</arg>
<kw name="Log" library="BuiltIn">
<arg>${result.stderr}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230512 15:48:11.251" level="INFO">Traceback (most recent call last):
  File "/home/runner/work/rfswarm/rfswarm/rfswarm_reporter/rfswarm_reporter.py", line 7724, in &lt;module&gt;
    core = ReporterCore()
  File "/home/runner/work/rfswarm/rfswarm/rfswarm_reporter/rfswarm_reporter.py", line 2430, in __init__
    base.gui = ReporterGUI()
  File "/home/runner/work/rfswarm/rfswarm/rfswarm_reporter/rfswarm_reporter.py", line 4453, in __init__
    self.BuildUI()
  File "/home/runner/work/rfswarm/rfswarm/rfswarm_reporter/rfswarm_reporter.py", line 4668, in BuildUI
    self.ConfigureStyle()
  File "/home/runner/work/rfswarm/rfswarm/rfswarm_reporter/rfswarm_reporter.py", line 4789, in ConfigureStyle
    matplotlib.rcParams['font.family'] = fontname
  File "/opt/hostedtoolcache/Python/3.10.11/x64/lib/python3.10/site-packages/matplotlib/__init__.py", line 718, in __setitem__
    raise ValueError(f"Key {key}: {ve}") from None
ValueError: Key font.family: Expected str or other non-set iterable, but got None</msg>
<status status="PASS" starttime="20230512 15:48:11.251" endtime="20230512 15:48:11.251"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${result.stderr}</arg>
<arg>Traceback</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<msg timestamp="20230512 15:48:11.252" level="FAIL">'Traceback (most recent call last):
  File "/home/runner/work/rfswarm/rfswarm/rfswarm_reporter/rfswarm_reporter.py", line 7724, in &lt;module&gt;
    core = ReporterCore()
  File "/home/runner/work/rfswarm/rfswarm/rfswarm_reporter/rfswarm_reporter.py", line 2430, in __init__
    base.gui = ReporterGUI()
  File "/home/runner/work/rfswarm/rfswarm/rfswarm_reporter/rfswarm_reporter.py", line 4453, in __init__
    self.BuildUI()
  File "/home/runner/work/rfswarm/rfswarm/rfswarm_reporter/rfswarm_reporter.py", line 4668, in BuildUI
    self.ConfigureStyle()
  File "/home/runner/work/rfswarm/rfswarm/rfswarm_reporter/rfswarm_reporter.py", line 4789, in ConfigureStyle
    matplotlib.rcParams['font.family'] = fontname
  File "/opt/hostedtoolcache/Python/3.10.11/x64/lib/python3.10/site-packages/matplotlib/__init__.py", line 718, in __setitem__
    raise ValueError(f"Key {key}: {ve}") from None
ValueError: Key font.family: Expected str or other non-set iterable, but got None' contains 'Traceback'</msg>
<status status="FAIL" starttime="20230512 15:48:11.252" endtime="20230512 15:48:11.252"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${result.rc}</arg>
<arg>0</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<status status="NOT RUN" starttime="20230512 15:48:11.253" endtime="20230512 15:48:11.253"/>
</kw>
<status status="FAIL" starttime="20230512 15:48:11.250" endtime="20230512 15:48:11.253"/>
</kw>
<status status="FAIL" starttime="20230512 15:48:11.249" endtime="20230512 15:48:11.253"/>
</branch>
<status status="FAIL" starttime="20230512 15:48:11.249" endtime="20230512 15:48:11.253"/>
</if>
<status status="FAIL" starttime="20230512 15:48:11.247" endtime="20230512 15:48:11.253"/>
</kw>
<tag>Issue #147</tag>
<tag>macos-latest</tag>
<tag>ubuntu-latest</tag>
<tag>windows-latest</tag>
<status status="FAIL" starttime="20230512 15:47:10.782" endtime="20230512 15:48:11.254">Several failures occurred:

1) ImageNotFoundException: Reference image "/home/runner/work/rfswarm/rfswarm/Tests/Regression/Reporter/Images/file_method/reporter_ubuntu_status_previewloaded.png" was not found on screen

2) 'Traceback (most recent call last):
  File "/home/runner/work/rfswarm/rfswarm/rfswarm_reporter/rfswarm_reporter.py", line 7724, in &lt;module&gt;
    core = ReporterCore()
  File "/home/runner/work/rfswarm/rfswarm/rfswarm_reporter/rfswarm_reporter.py", line 2430, in __init__
    base.gui = ReporterGUI()
  File "/home/runner/work/rfswarm/rfswarm/rfswarm_reporter/rfswarm_reporter.py", line 4453, in __init__
    self.BuildUI()
  File "/home/runner/work/rfswarm/rfswarm/rfswarm_reporter/rfswarm_reporter.py", line 4668, in BuildUI
    self.ConfigureStyle()
  File "/home/runner/work/rfswarm/rfswarm/rfswarm_reporter/rfswarm_reporter.py", line 4789, in ConfigureStyle
    matplotlib.rcParams['font.family'] = fontname
  File "/opt/hostedtoolcache/Python/3.10.11/x64/lib/python3.10/site-packages/matplotlib/__init__.py", line 718, in __setitem__
    raise ValueError(f"Key {key}: {ve}") from None
ValueError: Key font.family: Expected str or other non-set iterable, but got None' contains 'Traceback'</status>
</test>
<status status="FAIL" starttime="20230512 15:44:41.630" endtime="20230512 15:48:11.258"/>
</suite>
<status status="FAIL" starttime="20230512 15:44:23.518" endtime="20230512 15:48:11.259"/>
</suite>
<statistics>
<total>
<stat pass="5" fail="3" skip="0">All Tests</stat>
</total>
<tag>
<stat pass="1" fail="0" skip="0">DOCX</stat>
<stat pass="1" fail="0" skip="0">HTML</stat>
<stat pass="3" fail="0" skip="0">Issue #144</stat>
<stat pass="0" fail="1" skip="0">Issue #147</stat>
<stat pass="5" fail="3" skip="0">macos-latest</stat>
<stat pass="5" fail="3" skip="0">ubuntu-latest</stat>
<stat pass="5" fail="3" skip="0">windows-latest</stat>
<stat pass="1" fail="0" skip="0">XLSX</stat>
</tag>
<suite>
<stat pass="5" fail="3" skip="0" id="s1" name="Reporter">Reporter</stat>
<stat pass="5" fail="0" skip="0" id="s1-s1" name="CommandLine">Reporter.CommandLine</stat>
<stat pass="0" fail="3" skip="0" id="s1-s2" name="GUI Basic">Reporter.GUI Basic</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
